ZCML directives
===============

  >>> from zope.configuration.xmlconfig import xmlconfig, XMLConfig
  >>> from StringIO import StringIO

Load meta configuration.
  
  >>> import repoze.bfg.skins
  >>> XMLConfig('meta.zcml', repoze.bfg.skins)()

To keep the examples simple, we define a ZCML-template.
  
  >>> zcml_template = """\
  ... <configure
  ...     xmlns="http://namespaces.zope.org/zope"
  ...     xmlns:bfg="http://namespaces.repoze.org/bfg">
  ...   %s
  ... </configure>"""

Registering a template directory
--------------------------------

The most simple registration makes templates available for any context
and any request type.

  >>> xmlconfig(StringIO(zcml_template % ("""\
  ...   <bfg:templates
  ...     directory="%s/tests/templates"
  ...   />""" % path)))

Let's set up a context and test request.

  >>> from repoze.bfg.interfaces import IRequest
  >>> from webob import Request
  >>> request = Request.blank("")
  >>> interface.alsoProvides(request, IRequest)

  >>> class Context(object):
  ...     pass
  >>> context = Context()

The template directory contains two templates, "hello.pt" and
"world.pt". We'll verify that template components have been registered
with the component architecture.

  >>> from repoze.bfg.skins.interfaces import ISkinTemplate
  >>> template = component.getMultiAdapter(
  ...    (context, request), ISkinTemplate, name=u"hello")

  >>> template.path
  u'.../tests/templates/hello.pt'

The template provides a ``render`` method.
  
  >>> print template.render()
  <html xmlns="http://www.w3.org/1999/xhtml">
    <span>Hello,</span>
    <span>world!</span>
  </html>

Calling the template returns an HTTP response.
  
  >>> print template()
  200 OK
  content-type: text/html; charset=UTF-8
  Content-Length: ...
  <BLANKLINE>
  <html xmlns="http://www.w3.org/1999/xhtml">
    <span>Hello,</span>
    <span>world!</span>
  </html>
  
A method to look up skin templates is available from the module.
  
  >>> from repoze.bfg.skins import get_skin_template, \
  ...                              get_skin_template_view, \
  ...                              render_skin_template, \
  ...                              render_skin_template_to_response
  
  >>> get_skin_template(
  ...     context, request, u"hello")
  <repoze.bfg.skins.template.SkinTemplate object at ...>

  >>> render_skin_template_to_response(
  ...     context, request, u"hello")
  <Response at ... 200 OK>
  
  >>> print render_skin_template(
  ...     context, request, u"hello")
  <html xmlns="http://www.w3.org/1999/xhtml">
    <span>Hello,</span>
    <span>world!</span>
  </html>

We may optionally require adaptation on an alternative request
type. This is illustrated here by passing in ``None`` as the
request-object. In an actual use, a non-trivial request should be
provided.

  >>> get_skin_template(
  ...     context, None, u"hello", request_type=IRequest)
  <repoze.bfg.skins.template.SkinTemplate object at ...>
  
Optionally, the ``class`` attribute may be used to specify which skin
template to instantiate. A class to register a view is provided by
default.

  >>> xmlconfig(StringIO(zcml_template % ("""\
  ...   <bfg:templates
  ...     directory="%s/tests/templates"
  ...     class="repoze.bfg.skins.View"
  ...   />""" % path)))

  >>> from repoze.bfg.view import render_view
  >>> print render_view(context, request, u"hello")
  <html xmlns="http://www.w3.org/1999/xhtml">
    <span>Hello,</span>
    <span>world!</span>
  </html>

Alternatively, we can first retrieve the view component.

  >>> view = get_skin_template_view(context, request, u"hello")
  >>> print view.render(context, request)
  <html xmlns="http://www.w3.org/1999/xhtml">
    <span>Hello,</span>
    <span>world!</span>
  </html>
  
We may optionally protect views with a permission.

  >>> xmlconfig(StringIO(zcml_template % ("""\
  ...   <bfg:templates
  ...     directory="%s/tests/templates"
  ...     class="repoze.bfg.skins.View"
  ...     permission="some_permission"
  ...   />""" % path)))

To verify, let's query the registered view permission.

  >>> from repoze.bfg.interfaces import IViewPermission
  >>> component.queryMultiAdapter(
  ...     (context, request), IViewPermission, name=u"hello")
  <Permission at ... named u'some_permission' for None>

Note that providing the ``permission`` parameter is only allowed when
providing the ``IView`` interface.

  >>> xmlconfig(StringIO(zcml_template % ("""\
  ...   <bfg:templates
  ...     directory="%s/tests/templates"
  ...     permission="some_permission"
  ...   />""" % path)))
  Traceback (most recent call last):
   ...
  ZopeXMLConfigurationError: ...
        ValueError: Can only require permission when a view is provided.
  
Template Registry
-----------------

When the global configuration option ``auto_reload`` is set to "true",
skin templates are found at run-time.

Since this a test environment, we need to provide the global
configuration registry manually.

  >>> from repoze.bfg.interfaces import ISettings
  
  >>> class MockSettings(object):
  ...     reload_templates = True
  
  >>> component.provideUtility(MockSettings(), ISettings)

Create a template in the path we register above:

  >>> new_template_path.endswith("new.pt")
  True
  
  >>> file(new_template_path, "w").write("""\
  ... <html xmlns="http://www.w3.org/1999/xhtml"
  ...       xmlns:metal="http://xml.zope.org/namespaces/metal">
  ...   <span>Hello,</span>
  ...   <span metal:use-macro="template.get_macro('world')" />
  ... </html>""")

Now fire the ``INewRequest`` event.

  >>> from zope.event import notify
  >>> from repoze.bfg.events import NewRequest
  >>> notify(NewRequest(None))

The template should now be available:

  >>> component.getMultiAdapter(
  ...    (context, request), ISkinTemplate, name=u"new")
  <repoze.bfg.skins.template.SkinTemplate object at ...>
  
Skin API
--------

Libraries and applications can register APIs for use in templates.
  
  >>> from repoze.bfg.skins.template import SkinApi

  >>> class MyApi(SkinApi):
  ...     hello = u"world"
  
  >>> component.provideAdapter(MyApi, name="test")
  >>> print render_skin_template(
  ...     context, request, u"api")
  <html xmlns="http://www.w3.org/1999/xhtml">
    Hello, world!
  </html>

